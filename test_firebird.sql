-- Exemplo de DDL para um sistema de restaurante (Firebird 3+)
-- Objetivo: demonstrar criação de domínios, sequences, tabelas, chaves e triggers de auto-incremento
-- Obs: Ajuste o caminho do CREATE DATABASE conforme seu ambiente ou remova para executar conectado a um banco existente.

/* =============================
   CONFIGURAÇÃO INICIAL
   ============================= */
SET SQL DIALECT 3;
SET NAMES UTF8;

/* Caso queira criar um novo banco (opcional)
CREATE DATABASE '127.0.0.1/3050:restaurante.fdb'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 16384
DEFAULT CHARACTER SET UTF8;
*/

/* =============================
   DOMÍNIOS BÁSICOS
   ============================= */
CREATE DOMAIN DM_ID          AS BIGINT;
CREATE DOMAIN DM_FLAG        AS SMALLINT;
CREATE DOMAIN DM_TEXTO_50    AS VARCHAR(50) CHARACTER SET UTF8;
CREATE DOMAIN DM_TEXTO_80    AS VARCHAR(80) CHARACTER SET UTF8;
CREATE DOMAIN DM_TEXTO_120   AS VARCHAR(120) CHARACTER SET UTF8;
CREATE DOMAIN DM_TEXTO_255   AS VARCHAR(255) CHARACTER SET UTF8;
CREATE DOMAIN DM_EMAIL       AS VARCHAR(120) CHARACTER SET UTF8;
CREATE DOMAIN DM_CPF         AS CHAR(11);
CREATE DOMAIN DM_CNPJ        AS CHAR(14);
CREATE DOMAIN DM_DATAHORA    AS TIMESTAMP;
CREATE DOMAIN DM_DATA        AS DATE;
CREATE DOMAIN DM_DEC_QTD     AS NUMERIC(15,3);
CREATE DOMAIN DM_DEC_VALOR   AS NUMERIC(15,2);
CREATE DOMAIN DM_STATUS      AS SMALLINT; -- 1=ATIVO 0=INATIVO
CREATE DOMAIN DM_TIPO_PAGTO  AS VARCHAR(20) CHARACTER SET UTF8;

/* =============================
   SEQUENCES (GENERATORS)
   ============================= */
CREATE SEQUENCE GEN_RESTAURANTE;
CREATE SEQUENCE GEN_MESA;
CREATE SEQUENCE GEN_CARGOFUNC;
CREATE SEQUENCE GEN_FUNCIONARIO;
CREATE SEQUENCE GEN_CLIENTE;
CREATE SEQUENCE GEN_CATEGORIA_MENU;
CREATE SEQUENCE GEN_ITEM_MENU;
CREATE SEQUENCE GEN_PEDIDO;
CREATE SEQUENCE GEN_PEDIDO_ITEM;
CREATE SEQUENCE GEN_PAGAMENTO;
CREATE SEQUENCE GEN_FORNECEDOR;
CREATE SEQUENCE GEN_ESTOQUE_ITEM;
CREATE SEQUENCE GEN_COMPRA;
CREATE SEQUENCE GEN_COMPRA_ITEM;
CREATE SEQUENCE GEN_RESERVA;
CREATE SEQUENCE GEN_TURNO;
CREATE SEQUENCE GEN_TICKET_COZINHA;

/* =============================
   TABELAS
   ============================= */
CREATE TABLE RESTAURANTE (
    ID_RESTAURANTE   DM_ID NOT NULL,
    NOME             DM_TEXTO_120 NOT NULL,
    CNPJ             DM_CNPJ,
    EMAIL            DM_EMAIL,
    TELEFONE         DM_TEXTO_50,
    STATUS           DM_STATUS DEFAULT 1,
    DATA_CADASTRO    DM_DATAHORA DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE MESA (
    ID_MESA          DM_ID NOT NULL,
    ID_RESTAURANTE   DM_ID NOT NULL,
    IDENTIFICADOR    DM_TEXTO_50 NOT NULL,  -- Ex: A1, SALAO-05
    CAPACIDADE       SMALLINT,
    ATIVA            DM_FLAG DEFAULT 1
);

CREATE TABLE CARGO_FUNCIONARIO (
    ID_CARGOFUNC     DM_ID NOT NULL,
    DESCRICAO        DM_TEXTO_80 NOT NULL,
    NIVEL_ACESSO     SMALLINT NOT NULL -- 1 básico / 9 admin
);

CREATE TABLE FUNCIONARIO (
    ID_FUNCIONARIO   DM_ID NOT NULL,
    ID_RESTAURANTE   DM_ID NOT NULL,
    ID_CARGOFUNC     DM_ID NOT NULL,
    NOME             DM_TEXTO_120 NOT NULL,
    CPF              DM_CPF,
    EMAIL            DM_EMAIL,
    DATA_ADMISSAO    DM_DATA,
    DATA_DESLIGAMENTO DM_DATA,
    STATUS           DM_STATUS DEFAULT 1
);

CREATE TABLE CLIENTE (
    ID_CLIENTE       DM_ID NOT NULL,
    NOME             DM_TEXTO_120 NOT NULL,
    CPF              DM_CPF,
    EMAIL            DM_EMAIL,
    TELEFONE         DM_TEXTO_50,
    DATA_CADASTRO    DM_DATAHORA DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE CATEGORIA_MENU (
    ID_CATEGORIA     DM_ID NOT NULL,
    ID_RESTAURANTE   DM_ID NOT NULL,
    DESCRICAO        DM_TEXTO_80 NOT NULL,
    ORDEM            INTEGER,
    ATIVA            DM_FLAG DEFAULT 1
);

CREATE TABLE ITEM_MENU (
    ID_ITEM_MENU     DM_ID NOT NULL,
    ID_CATEGORIA     DM_ID NOT NULL,
    DESCRICAO        DM_TEXTO_120 NOT NULL,
    DETALHE          DM_TEXTO_255,
    PRECO            DM_DEC_VALOR NOT NULL,
    CODIGO_EXTERNO   DM_TEXTO_50,
    ATIVO            DM_FLAG DEFAULT 1
);

CREATE TABLE PEDIDO (
    ID_PEDIDO        DM_ID NOT NULL,
    ID_RESTAURANTE   DM_ID NOT NULL,
    ID_MESA          DM_ID,
    ID_FUNCIONARIO   DM_ID,  -- garçom
    ID_CLIENTE       DM_ID,
    DATA_ABERTURA    DM_DATAHORA DEFAULT CURRENT_TIMESTAMP NOT NULL,
    DATA_FECHAMENTO  DM_DATAHORA,
    STATUS           DM_TEXTO_50, -- ABERTO, FECHADO, CANCELADO
    OBS              DM_TEXTO_255
);

CREATE TABLE PEDIDO_ITEM (
    ID_PEDIDO_ITEM   DM_ID NOT NULL,
    ID_PEDIDO        DM_ID NOT NULL,
    ID_ITEM_MENU     DM_ID NOT NULL,
    QUANTIDADE       DM_DEC_QTD NOT NULL,
    PRECO_UNIT       DM_DEC_VALOR NOT NULL,
    DESCONTO_VALOR   DM_DEC_VALOR DEFAULT 0,
    OBS              DM_TEXTO_255,
    STATUS_PREPARO   DM_TEXTO_50 -- PENDENTE, PREPARANDO, PRONTO, ENTREGUE, CANCELADO
);

CREATE TABLE PAGAMENTO (
    ID_PAGAMENTO     DM_ID NOT NULL,
    ID_PEDIDO        DM_ID NOT NULL,
    TIPO             DM_TIPO_PAGTO NOT NULL, -- DINHEIRO, CARTAO, PIX
    VALOR_TOTAL      DM_DEC_VALOR NOT NULL,
    DATA_PAGAMENTO   DM_DATAHORA DEFAULT CURRENT_TIMESTAMP NOT NULL,
    CONFIRMADO       DM_FLAG DEFAULT 1
);

CREATE TABLE FORNECEDOR (
    ID_FORNECEDOR    DM_ID NOT NULL,
    NOME             DM_TEXTO_120 NOT NULL,
    CNPJ             DM_CNPJ,
    EMAIL            DM_EMAIL,
    TELEFONE         DM_TEXTO_50,
    ATIVO            DM_FLAG DEFAULT 1
);

CREATE TABLE ESTOQUE_ITEM (
    ID_ESTOQUE_ITEM  DM_ID NOT NULL,
    ID_RESTAURANTE   DM_ID NOT NULL,
    DESCRICAO        DM_TEXTO_120 NOT NULL,
    UNIDADE          DM_TEXTO_50 NOT NULL, -- kg, un, L
    ESTOQUE_ATUAL    DM_DEC_QTD DEFAULT 0,
    ESTOQUE_MIN      DM_DEC_QTD DEFAULT 0,
    ATIVO            DM_FLAG DEFAULT 1
);

CREATE TABLE COMPRA (
    ID_COMPRA        DM_ID NOT NULL,
    ID_FORNECEDOR    DM_ID NOT NULL,
    ID_RESTAURANTE   DM_ID NOT NULL,
    DATA_COMPRA      DM_DATAHORA DEFAULT CURRENT_TIMESTAMP NOT NULL,
    VALOR_TOTAL      DM_DEC_VALOR,
    STATUS           DM_TEXTO_50 -- ABERTA, RECEBIDA, CANCELADA
);

CREATE TABLE COMPRA_ITEM (
    ID_COMPRA_ITEM   DM_ID NOT NULL,
    ID_COMPRA        DM_ID NOT NULL,
    ID_ESTOQUE_ITEM  DM_ID NOT NULL,
    QUANTIDADE       DM_DEC_QTD NOT NULL,
    PRECO_UNIT       DM_DEC_VALOR NOT NULL,
    VALOR_TOTAL      DM_DEC_VALOR NOT NULL
);

CREATE TABLE RESERVA (
    ID_RESERVA       DM_ID NOT NULL,
    ID_RESTAURANTE   DM_ID NOT NULL,
    ID_MESA          DM_ID NOT NULL,
    NOME_CLIENTE     DM_TEXTO_120 NOT NULL,
    DATA_RESERVA     DM_DATA NOT NULL,
    HORA_INICIO      TIME NOT NULL,
    HORA_FIM         TIME,
    TELEFONE         DM_TEXTO_50,
    STATUS           DM_TEXTO_50 -- ATIVA, CONCLUIDA, CANCELADA
);

CREATE TABLE TURNO (
    ID_TURNO         DM_ID NOT NULL,
    ID_FUNCIONARIO   DM_ID NOT NULL,
    DATA_INICIO      DM_DATAHORA NOT NULL,
    DATA_FIM         DM_DATAHORA,
    STATUS           DM_TEXTO_50 -- ABERTO, ENCERRADO
);

CREATE TABLE TICKET_COZINHA (
    ID_TICKET        DM_ID NOT NULL,
    ID_PEDIDO_ITEM   DM_ID NOT NULL,
    HORARIO_EMISSAO  DM_DATAHORA DEFAULT CURRENT_TIMESTAMP NOT NULL,
    HORARIO_INICIO   DM_DATAHORA,
    HORARIO_FIM      DM_DATAHORA,
    STATUS           DM_TEXTO_50 -- PENDENTE, EM_PREPARO, PRONTO
);

/* =============================
   PRIMARY KEYS
   ============================= */
ALTER TABLE RESTAURANTE    ADD CONSTRAINT PK_RESTAURANTE PRIMARY KEY (ID_RESTAURANTE);
ALTER TABLE MESA           ADD CONSTRAINT PK_MESA PRIMARY KEY (ID_MESA);
ALTER TABLE CARGO_FUNCIONARIO ADD CONSTRAINT PK_CARGO_FUNCIONARIO PRIMARY KEY (ID_CARGOFUNC);
ALTER TABLE FUNCIONARIO    ADD CONSTRAINT PK_FUNCIONARIO PRIMARY KEY (ID_FUNCIONARIO);
ALTER TABLE CLIENTE        ADD CONSTRAINT PK_CLIENTE PRIMARY KEY (ID_CLIENTE);
ALTER TABLE CATEGORIA_MENU ADD CONSTRAINT PK_CATEGORIA_MENU PRIMARY KEY (ID_CATEGORIA);
ALTER TABLE ITEM_MENU      ADD CONSTRAINT PK_ITEM_MENU PRIMARY KEY (ID_ITEM_MENU);
ALTER TABLE PEDIDO         ADD CONSTRAINT PK_PEDIDO PRIMARY KEY (ID_PEDIDO);
ALTER TABLE PEDIDO_ITEM    ADD CONSTRAINT PK_PEDIDO_ITEM PRIMARY KEY (ID_PEDIDO_ITEM);
ALTER TABLE PAGAMENTO      ADD CONSTRAINT PK_PAGAMENTO PRIMARY KEY (ID_PAGAMENTO);
ALTER TABLE FORNECEDOR     ADD CONSTRAINT PK_FORNECEDOR PRIMARY KEY (ID_FORNECEDOR);
ALTER TABLE ESTOQUE_ITEM   ADD CONSTRAINT PK_ESTOQUE_ITEM PRIMARY KEY (ID_ESTOQUE_ITEM);
ALTER TABLE COMPRA         ADD CONSTRAINT PK_COMPRA PRIMARY KEY (ID_COMPRA);
ALTER TABLE COMPRA_ITEM    ADD CONSTRAINT PK_COMPRA_ITEM PRIMARY KEY (ID_COMPRA_ITEM);
ALTER TABLE RESERVA        ADD CONSTRAINT PK_RESERVA PRIMARY KEY (ID_RESERVA);
ALTER TABLE TURNO          ADD CONSTRAINT PK_TURNO PRIMARY KEY (ID_TURNO);
ALTER TABLE TICKET_COZINHA ADD CONSTRAINT PK_TICKET_COZINHA PRIMARY KEY (ID_TICKET);

/* =============================
   FOREIGN KEYS
   ============================= */
ALTER TABLE MESA           ADD CONSTRAINT FK_MESA_RESTAURANTE FOREIGN KEY (ID_RESTAURANTE) REFERENCES RESTAURANTE (ID_RESTAURANTE);
ALTER TABLE FUNCIONARIO    ADD CONSTRAINT FK_FUNC_RESTAURANTE FOREIGN KEY (ID_RESTAURANTE) REFERENCES RESTAURANTE (ID_RESTAURANTE);
ALTER TABLE FUNCIONARIO    ADD CONSTRAINT FK_FUNC_CARGO       FOREIGN KEY (ID_CARGOFUNC) REFERENCES CARGO_FUNCIONARIO (ID_CARGOFUNC);
ALTER TABLE CATEGORIA_MENU ADD CONSTRAINT FK_CAT_RESTAURANTE  FOREIGN KEY (ID_RESTAURANTE) REFERENCES RESTAURANTE (ID_RESTAURANTE);
ALTER TABLE ITEM_MENU      ADD CONSTRAINT FK_ITEM_CATEGORIA   FOREIGN KEY (ID_CATEGORIA) REFERENCES CATEGORIA_MENU (ID_CATEGORIA);
ALTER TABLE PEDIDO         ADD CONSTRAINT FK_PED_RESTAURANTE  FOREIGN KEY (ID_RESTAURANTE) REFERENCES RESTAURANTE (ID_RESTAURANTE);
ALTER TABLE PEDIDO         ADD CONSTRAINT FK_PED_MESA         FOREIGN KEY (ID_MESA) REFERENCES MESA (ID_MESA);
ALTER TABLE PEDIDO         ADD CONSTRAINT FK_PED_FUNC         FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE PEDIDO         ADD CONSTRAINT FK_PED_CLIENTE      FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE (ID_CLIENTE);
ALTER TABLE PEDIDO_ITEM    ADD CONSTRAINT FK_PEDIT_PEDIDO     FOREIGN KEY (ID_PEDIDO) REFERENCES PEDIDO (ID_PEDIDO);
ALTER TABLE PEDIDO_ITEM    ADD CONSTRAINT FK_PEDIT_ITEMMENU   FOREIGN KEY (ID_ITEM_MENU) REFERENCES ITEM_MENU (ID_ITEM_MENU);
ALTER TABLE PAGAMENTO      ADD CONSTRAINT FK_PAG_PEDIDO       FOREIGN KEY (ID_PEDIDO) REFERENCES PEDIDO (ID_PEDIDO);
ALTER TABLE ESTOQUE_ITEM   ADD CONSTRAINT FK_EST_RESTAURANTE  FOREIGN KEY (ID_RESTAURANTE) REFERENCES RESTAURANTE (ID_RESTAURANTE);
ALTER TABLE COMPRA         ADD CONSTRAINT FK_COMP_FORNEC      FOREIGN KEY (ID_FORNECEDOR) REFERENCES FORNECEDOR (ID_FORNECEDOR);
ALTER TABLE COMPRA         ADD CONSTRAINT FK_COMP_RESTAURANTE FOREIGN KEY (ID_RESTAURANTE) REFERENCES RESTAURANTE (ID_RESTAURANTE);
ALTER TABLE COMPRA_ITEM    ADD CONSTRAINT FK_COMPIT_COMPRA    FOREIGN KEY (ID_COMPRA) REFERENCES COMPRA (ID_COMPRA);
ALTER TABLE COMPRA_ITEM    ADD CONSTRAINT FK_COMPIT_ESTOQUE   FOREIGN KEY (ID_ESTOQUE_ITEM) REFERENCES ESTOQUE_ITEM (ID_ESTOQUE_ITEM);
ALTER TABLE RESERVA        ADD CONSTRAINT FK_RES_RESTAURANTE  FOREIGN KEY (ID_RESTAURANTE) REFERENCES RESTAURANTE (ID_RESTAURANTE);
ALTER TABLE RESERVA        ADD CONSTRAINT FK_RES_MESA         FOREIGN KEY (ID_MESA) REFERENCES MESA (ID_MESA);
ALTER TABLE TURNO          ADD CONSTRAINT FK_TURNO_FUNC       FOREIGN KEY (ID_FUNCIONARIO) REFERENCES FUNCIONARIO (ID_FUNCIONARIO);
ALTER TABLE TICKET_COZINHA ADD CONSTRAINT FK_TIC_PEDIT        FOREIGN KEY (ID_PEDIDO_ITEM) REFERENCES PEDIDO_ITEM (ID_PEDIDO_ITEM);

/* =============================
   ÍNDICES ADICIONAIS
   ============================= */
CREATE INDEX IDX_ITEM_MENU_CATEGORIA ON ITEM_MENU (ID_CATEGORIA);
CREATE INDEX IDX_PEDIDO_STATUS       ON PEDIDO (STATUS);
CREATE INDEX IDX_PEDIDO_DATA_ABERT   ON PEDIDO (DATA_ABERTURA);
CREATE INDEX IDX_PEDIDO_ITEM_PEDIDO  ON PEDIDO_ITEM (ID_PEDIDO);
CREATE INDEX IDX_PAGAMENTO_PEDIDO    ON PAGAMENTO (ID_PEDIDO);
CREATE INDEX IDX_ESTOQUE_DESC        ON ESTOQUE_ITEM (DESCRICAO);
CREATE INDEX IDX_COMPRA_STATUS       ON COMPRA (STATUS);
CREATE INDEX IDX_RESERVA_DATA        ON RESERVA (DATA_RESERVA);

/* =============================
   TRIGGERS DE AUTO-INCREMENTO (CASO NÃO USE IDENTITY)
   ============================= */
SET TERM ^^ ;

CREATE OR ALTER TRIGGER BI_RESTAURANTE FOR RESTAURANTE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_RESTAURANTE IS NULL) THEN NEW.ID_RESTAURANTE = NEXT VALUE FOR GEN_RESTAURANTE;
END^^

CREATE OR ALTER TRIGGER BI_MESA FOR MESA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_MESA IS NULL) THEN NEW.ID_MESA = NEXT VALUE FOR GEN_MESA;
END^^

CREATE OR ALTER TRIGGER BI_CARGOFUNC FOR CARGO_FUNCIONARIO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_CARGOFUNC IS NULL) THEN NEW.ID_CARGOFUNC = NEXT VALUE FOR GEN_CARGOFUNC;
END^^

CREATE OR ALTER TRIGGER BI_FUNCIONARIO FOR FUNCIONARIO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_FUNCIONARIO IS NULL) THEN NEW.ID_FUNCIONARIO = NEXT VALUE FOR GEN_FUNCIONARIO;
END^^

CREATE OR ALTER TRIGGER BI_CLIENTE FOR CLIENTE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_CLIENTE IS NULL) THEN NEW.ID_CLIENTE = NEXT VALUE FOR GEN_CLIENTE;
END^^

CREATE OR ALTER TRIGGER BI_CATEGORIA_MENU FOR CATEGORIA_MENU
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_CATEGORIA IS NULL) THEN NEW.ID_CATEGORIA = NEXT VALUE FOR GEN_CATEGORIA_MENU;
END^^

CREATE OR ALTER TRIGGER BI_ITEM_MENU FOR ITEM_MENU
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_ITEM_MENU IS NULL) THEN NEW.ID_ITEM_MENU = NEXT VALUE FOR GEN_ITEM_MENU;
END^^

CREATE OR ALTER TRIGGER BI_PEDIDO FOR PEDIDO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_PEDIDO IS NULL) THEN NEW.ID_PEDIDO = NEXT VALUE FOR GEN_PEDIDO;
END^^

CREATE OR ALTER TRIGGER BI_PEDIDO_ITEM FOR PEDIDO_ITEM
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_PEDIDO_ITEM IS NULL) THEN NEW.ID_PEDIDO_ITEM = NEXT VALUE FOR GEN_PEDIDO_ITEM;
END^^

CREATE OR ALTER TRIGGER BI_PAGAMENTO FOR PAGAMENTO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_PAGAMENTO IS NULL) THEN NEW.ID_PAGAMENTO = NEXT VALUE FOR GEN_PAGAMENTO;
END^^

CREATE OR ALTER TRIGGER BI_FORNECEDOR FOR FORNECEDOR
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_FORNECEDOR IS NULL) THEN NEW.ID_FORNECEDOR = NEXT VALUE FOR GEN_FORNECEDOR;
END^^

CREATE OR ALTER TRIGGER BI_ESTOQUE_ITEM FOR ESTOQUE_ITEM
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_ESTOQUE_ITEM IS NULL) THEN NEW.ID_ESTOQUE_ITEM = NEXT VALUE FOR GEN_ESTOQUE_ITEM;
END^^

CREATE OR ALTER TRIGGER BI_COMPRA FOR COMPRA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_COMPRA IS NULL) THEN NEW.ID_COMPRA = NEXT VALUE FOR GEN_COMPRA;
END^^

CREATE OR ALTER TRIGGER BI_COMPRA_ITEM FOR COMPRA_ITEM
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_COMPRA_ITEM IS NULL) THEN NEW.ID_COMPRA_ITEM = NEXT VALUE FOR GEN_COMPRA_ITEM;
END^^

CREATE OR ALTER TRIGGER BI_RESERVA FOR RESERVA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_RESERVA IS NULL) THEN NEW.ID_RESERVA = NEXT VALUE FOR GEN_RESERVA;
END^^

CREATE OR ALTER TRIGGER BI_TURNO FOR TURNO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_TURNO IS NULL) THEN NEW.ID_TURNO = NEXT VALUE FOR GEN_TURNO;
END^^

CREATE OR ALTER TRIGGER BI_TICKET_COZINHA FOR TICKET_COZINHA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_TICKET IS NULL) THEN NEW.ID_TICKET = NEXT VALUE FOR GEN_TICKET_COZINHA;
END^^

SET TERM ; ^^

/* =============================
   VIEW DE FATURAMENTO DIÁRIO (EXEMPLO)
   ============================= */
CREATE OR ALTER VIEW VW_FATURAMENTO_DIARIO AS
SELECT
    CAST(p.DATA_FECHAMENTO AS DATE) AS DATA_DIA,
    SUM(pi.QUANTIDADE * pi.PRECO_UNIT - COALESCE(pi.DESCONTO_VALOR,0)) AS VALOR_BRUTO,
    SUM(pg.VALOR_TOTAL) AS VALOR_PAGO
FROM PEDIDO p
LEFT JOIN PEDIDO_ITEM pi ON pi.ID_PEDIDO = p.ID_PEDIDO
LEFT JOIN PAGAMENTO pg ON pg.ID_PEDIDO = p.ID_PEDIDO
WHERE p.DATA_FECHAMENTO IS NOT NULL
GROUP BY 1;

/* =============================
   PROCEDURE DE ATUALIZAÇÃO DE ESTOQUE AO RECEBER COMPRA (EXEMPLO)
   ============================= */
SET TERM ^^ ;
CREATE OR ALTER PROCEDURE SP_APLICA_COMPRA (P_ID_COMPRA BIGINT)
AS
BEGIN
  FOR SELECT ci.ID_ESTOQUE_ITEM, ci.QUANTIDADE
      FROM COMPRA_ITEM ci
      WHERE ci.ID_COMPRA = :P_ID_COMPRA
      INTO :ID_ESTOQUE_ITEM, :QTD LOOP
  BEGIN
    UPDATE ESTOQUE_ITEM e SET e.ESTOQUE_ATUAL = COALESCE(e.ESTOQUE_ATUAL,0) + :QTD
    WHERE e.ID_ESTOQUE_ITEM = :ID_ESTOQUE_ITEM;
  END
END^^
SET TERM ; ^^

/* =============================
   COMENTÁRIOS / METADADOS
   ============================= */
COMMENT ON TABLE RESTAURANTE IS 'Restaurante (matriz ou unidade)';
COMMENT ON TABLE MESA IS 'Mesas físicas ou áreas identificadas';
COMMENT ON TABLE ITEM_MENU IS 'Itens do cardápio';
COMMENT ON TABLE PEDIDO IS 'Cabeçalho do pedido';
COMMENT ON TABLE PEDIDO_ITEM IS 'Itens do pedido';
COMMENT ON TABLE PAGAMENTO IS 'Pagamentos dos pedidos';
COMMENT ON VIEW VW_FATURAMENTO_DIARIO IS 'Resumo de faturamento diário (bruto x pago)';

-- Fim do script de exemplo de restaurante
